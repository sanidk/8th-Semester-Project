using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class GameLogicSyncModel {

    [RealtimeProperty(1, true, true)]
    private bool _isPlayersReadyToStartGame;
    [RealtimeProperty(2, true, true)]
    private bool _isGameStarted;

    [RealtimeProperty(3, true, true)]
    private Color _colorWeaponPlayer1;
    [RealtimeProperty(4, true, true)]
    private Color _colorWeaponPlayer2;

    [RealtimeProperty(5, true, true)]
    private double _gameTimeElapsed;

    [RealtimeProperty(6, true, true)]
    private int _streakPlayer1;
    [RealtimeProperty(7, true, true)]
    private int _streakPlayer2;

    [RealtimeProperty(8, true, true)]
    private int _trapsPlayer1;
    [RealtimeProperty(9, true, true)]
    private int _trapsPlayer2;

    [RealtimeProperty(10, true, true)]
    private int _levelPlayer1;
    [RealtimeProperty(11, true, true)]
    private int _levelPlayer2;

    [RealtimeProperty(12, true, true)]
    private int _livesPlayer1;
    [RealtimeProperty(13, true, true)]
    private int _livesPlayer2;

    [RealtimeProperty(14, true, true)]
    private int _gameWinner;

    [RealtimeProperty(15, true, true)]
    private bool _backupVariable1;
    [RealtimeProperty(16, true, true)]
    private bool _backupVariable2;
    [RealtimeProperty(17, true, true)]
    private int _backupVariable3;
    [RealtimeProperty(18, true, true)]
    private int _backupVariable4;
    [RealtimeProperty(19, true, true)]
    private float _backupVariable5;
    [RealtimeProperty(20, true, true)]
    private float _backupVariable6;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class GameLogicSyncModel : RealtimeModel {
    public bool isPlayersReadyToStartGame {
        get {
            return _isPlayersReadyToStartGameProperty.value;
        }
        set {
            if (_isPlayersReadyToStartGameProperty.value == value) return;
            _isPlayersReadyToStartGameProperty.value = value;
            InvalidateReliableLength();
            FireIsPlayersReadyToStartGameDidChange(value);
        }
    }
    
    public bool isGameStarted {
        get {
            return _isGameStartedProperty.value;
        }
        set {
            if (_isGameStartedProperty.value == value) return;
            _isGameStartedProperty.value = value;
            InvalidateReliableLength();
            FireIsGameStartedDidChange(value);
        }
    }
    
    public UnityEngine.Color colorWeaponPlayer1 {
        get {
            return _colorWeaponPlayer1Property.value;
        }
        set {
            if (_colorWeaponPlayer1Property.value == value) return;
            _colorWeaponPlayer1Property.value = value;
            InvalidateReliableLength();
            FireColorWeaponPlayer1DidChange(value);
        }
    }
    
    public UnityEngine.Color colorWeaponPlayer2 {
        get {
            return _colorWeaponPlayer2Property.value;
        }
        set {
            if (_colorWeaponPlayer2Property.value == value) return;
            _colorWeaponPlayer2Property.value = value;
            InvalidateReliableLength();
            FireColorWeaponPlayer2DidChange(value);
        }
    }
    
    public double gameTimeElapsed {
        get {
            return _gameTimeElapsedProperty.value;
        }
        set {
            if (_gameTimeElapsedProperty.value == value) return;
            _gameTimeElapsedProperty.value = value;
            InvalidateReliableLength();
            FireGameTimeElapsedDidChange(value);
        }
    }
    
    public int streakPlayer1 {
        get {
            return _streakPlayer1Property.value;
        }
        set {
            if (_streakPlayer1Property.value == value) return;
            _streakPlayer1Property.value = value;
            InvalidateReliableLength();
            FireStreakPlayer1DidChange(value);
        }
    }
    
    public int streakPlayer2 {
        get {
            return _streakPlayer2Property.value;
        }
        set {
            if (_streakPlayer2Property.value == value) return;
            _streakPlayer2Property.value = value;
            InvalidateReliableLength();
            FireStreakPlayer2DidChange(value);
        }
    }
    
    public int trapsPlayer1 {
        get {
            return _trapsPlayer1Property.value;
        }
        set {
            if (_trapsPlayer1Property.value == value) return;
            _trapsPlayer1Property.value = value;
            InvalidateReliableLength();
            FireTrapsPlayer1DidChange(value);
        }
    }
    
    public int trapsPlayer2 {
        get {
            return _trapsPlayer2Property.value;
        }
        set {
            if (_trapsPlayer2Property.value == value) return;
            _trapsPlayer2Property.value = value;
            InvalidateReliableLength();
            FireTrapsPlayer2DidChange(value);
        }
    }
    
    public int levelPlayer1 {
        get {
            return _levelPlayer1Property.value;
        }
        set {
            if (_levelPlayer1Property.value == value) return;
            _levelPlayer1Property.value = value;
            InvalidateReliableLength();
            FireLevelPlayer1DidChange(value);
        }
    }
    
    public int levelPlayer2 {
        get {
            return _levelPlayer2Property.value;
        }
        set {
            if (_levelPlayer2Property.value == value) return;
            _levelPlayer2Property.value = value;
            InvalidateReliableLength();
            FireLevelPlayer2DidChange(value);
        }
    }
    
    public int livesPlayer1 {
        get {
            return _livesPlayer1Property.value;
        }
        set {
            if (_livesPlayer1Property.value == value) return;
            _livesPlayer1Property.value = value;
            InvalidateReliableLength();
            FireLivesPlayer1DidChange(value);
        }
    }
    
    public int livesPlayer2 {
        get {
            return _livesPlayer2Property.value;
        }
        set {
            if (_livesPlayer2Property.value == value) return;
            _livesPlayer2Property.value = value;
            InvalidateReliableLength();
            FireLivesPlayer2DidChange(value);
        }
    }
    
    public int gameWinner {
        get {
            return _gameWinnerProperty.value;
        }
        set {
            if (_gameWinnerProperty.value == value) return;
            _gameWinnerProperty.value = value;
            InvalidateReliableLength();
            FireGameWinnerDidChange(value);
        }
    }
    
    public bool backupVariable1 {
        get {
            return _backupVariable1Property.value;
        }
        set {
            if (_backupVariable1Property.value == value) return;
            _backupVariable1Property.value = value;
            InvalidateReliableLength();
            FireBackupVariable1DidChange(value);
        }
    }
    
    public bool backupVariable2 {
        get {
            return _backupVariable2Property.value;
        }
        set {
            if (_backupVariable2Property.value == value) return;
            _backupVariable2Property.value = value;
            InvalidateReliableLength();
            FireBackupVariable2DidChange(value);
        }
    }
    
    public int backupVariable3 {
        get {
            return _backupVariable3Property.value;
        }
        set {
            if (_backupVariable3Property.value == value) return;
            _backupVariable3Property.value = value;
            InvalidateReliableLength();
            FireBackupVariable3DidChange(value);
        }
    }
    
    public int backupVariable4 {
        get {
            return _backupVariable4Property.value;
        }
        set {
            if (_backupVariable4Property.value == value) return;
            _backupVariable4Property.value = value;
            InvalidateReliableLength();
            FireBackupVariable4DidChange(value);
        }
    }
    
    public float backupVariable5 {
        get {
            return _backupVariable5Property.value;
        }
        set {
            if (_backupVariable5Property.value == value) return;
            _backupVariable5Property.value = value;
            InvalidateReliableLength();
            FireBackupVariable5DidChange(value);
        }
    }
    
    public float backupVariable6 {
        get {
            return _backupVariable6Property.value;
        }
        set {
            if (_backupVariable6Property.value == value) return;
            _backupVariable6Property.value = value;
            InvalidateReliableLength();
            FireBackupVariable6DidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(GameLogicSyncModel model, T value);
    public event PropertyChangedHandler<bool> isPlayersReadyToStartGameDidChange;
    public event PropertyChangedHandler<bool> isGameStartedDidChange;
    public event PropertyChangedHandler<UnityEngine.Color> colorWeaponPlayer1DidChange;
    public event PropertyChangedHandler<UnityEngine.Color> colorWeaponPlayer2DidChange;
    public event PropertyChangedHandler<double> gameTimeElapsedDidChange;
    public event PropertyChangedHandler<int> streakPlayer1DidChange;
    public event PropertyChangedHandler<int> streakPlayer2DidChange;
    public event PropertyChangedHandler<int> trapsPlayer1DidChange;
    public event PropertyChangedHandler<int> trapsPlayer2DidChange;
    public event PropertyChangedHandler<int> levelPlayer1DidChange;
    public event PropertyChangedHandler<int> levelPlayer2DidChange;
    public event PropertyChangedHandler<int> livesPlayer1DidChange;
    public event PropertyChangedHandler<int> livesPlayer2DidChange;
    public event PropertyChangedHandler<int> gameWinnerDidChange;
    public event PropertyChangedHandler<bool> backupVariable1DidChange;
    public event PropertyChangedHandler<bool> backupVariable2DidChange;
    public event PropertyChangedHandler<int> backupVariable3DidChange;
    public event PropertyChangedHandler<int> backupVariable4DidChange;
    public event PropertyChangedHandler<float> backupVariable5DidChange;
    public event PropertyChangedHandler<float> backupVariable6DidChange;
    
    public enum PropertyID : uint {
        IsPlayersReadyToStartGame = 1,
        IsGameStarted = 2,
        ColorWeaponPlayer1 = 3,
        ColorWeaponPlayer2 = 4,
        GameTimeElapsed = 5,
        StreakPlayer1 = 6,
        StreakPlayer2 = 7,
        TrapsPlayer1 = 8,
        TrapsPlayer2 = 9,
        LevelPlayer1 = 10,
        LevelPlayer2 = 11,
        LivesPlayer1 = 12,
        LivesPlayer2 = 13,
        GameWinner = 14,
        BackupVariable1 = 15,
        BackupVariable2 = 16,
        BackupVariable3 = 17,
        BackupVariable4 = 18,
        BackupVariable5 = 19,
        BackupVariable6 = 20,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _isPlayersReadyToStartGameProperty;
    
    private ReliableProperty<bool> _isGameStartedProperty;
    
    private ReliableProperty<UnityEngine.Color> _colorWeaponPlayer1Property;
    
    private ReliableProperty<UnityEngine.Color> _colorWeaponPlayer2Property;
    
    private ReliableProperty<double> _gameTimeElapsedProperty;
    
    private ReliableProperty<int> _streakPlayer1Property;
    
    private ReliableProperty<int> _streakPlayer2Property;
    
    private ReliableProperty<int> _trapsPlayer1Property;
    
    private ReliableProperty<int> _trapsPlayer2Property;
    
    private ReliableProperty<int> _levelPlayer1Property;
    
    private ReliableProperty<int> _levelPlayer2Property;
    
    private ReliableProperty<int> _livesPlayer1Property;
    
    private ReliableProperty<int> _livesPlayer2Property;
    
    private ReliableProperty<int> _gameWinnerProperty;
    
    private ReliableProperty<bool> _backupVariable1Property;
    
    private ReliableProperty<bool> _backupVariable2Property;
    
    private ReliableProperty<int> _backupVariable3Property;
    
    private ReliableProperty<int> _backupVariable4Property;
    
    private ReliableProperty<float> _backupVariable5Property;
    
    private ReliableProperty<float> _backupVariable6Property;
    
    #endregion
    
    public GameLogicSyncModel() : base(null) {
        _isPlayersReadyToStartGameProperty = new ReliableProperty<bool>(1, _isPlayersReadyToStartGame);
        _isGameStartedProperty = new ReliableProperty<bool>(2, _isGameStarted);
        _colorWeaponPlayer1Property = new ReliableProperty<UnityEngine.Color>(3, _colorWeaponPlayer1);
        _colorWeaponPlayer2Property = new ReliableProperty<UnityEngine.Color>(4, _colorWeaponPlayer2);
        _gameTimeElapsedProperty = new ReliableProperty<double>(5, _gameTimeElapsed);
        _streakPlayer1Property = new ReliableProperty<int>(6, _streakPlayer1);
        _streakPlayer2Property = new ReliableProperty<int>(7, _streakPlayer2);
        _trapsPlayer1Property = new ReliableProperty<int>(8, _trapsPlayer1);
        _trapsPlayer2Property = new ReliableProperty<int>(9, _trapsPlayer2);
        _levelPlayer1Property = new ReliableProperty<int>(10, _levelPlayer1);
        _levelPlayer2Property = new ReliableProperty<int>(11, _levelPlayer2);
        _livesPlayer1Property = new ReliableProperty<int>(12, _livesPlayer1);
        _livesPlayer2Property = new ReliableProperty<int>(13, _livesPlayer2);
        _gameWinnerProperty = new ReliableProperty<int>(14, _gameWinner);
        _backupVariable1Property = new ReliableProperty<bool>(15, _backupVariable1);
        _backupVariable2Property = new ReliableProperty<bool>(16, _backupVariable2);
        _backupVariable3Property = new ReliableProperty<int>(17, _backupVariable3);
        _backupVariable4Property = new ReliableProperty<int>(18, _backupVariable4);
        _backupVariable5Property = new ReliableProperty<float>(19, _backupVariable5);
        _backupVariable6Property = new ReliableProperty<float>(20, _backupVariable6);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _isPlayersReadyToStartGameProperty.UnsubscribeCallback();
        _isGameStartedProperty.UnsubscribeCallback();
        _colorWeaponPlayer1Property.UnsubscribeCallback();
        _colorWeaponPlayer2Property.UnsubscribeCallback();
        _gameTimeElapsedProperty.UnsubscribeCallback();
        _streakPlayer1Property.UnsubscribeCallback();
        _streakPlayer2Property.UnsubscribeCallback();
        _trapsPlayer1Property.UnsubscribeCallback();
        _trapsPlayer2Property.UnsubscribeCallback();
        _levelPlayer1Property.UnsubscribeCallback();
        _levelPlayer2Property.UnsubscribeCallback();
        _livesPlayer1Property.UnsubscribeCallback();
        _livesPlayer2Property.UnsubscribeCallback();
        _gameWinnerProperty.UnsubscribeCallback();
        _backupVariable1Property.UnsubscribeCallback();
        _backupVariable2Property.UnsubscribeCallback();
        _backupVariable3Property.UnsubscribeCallback();
        _backupVariable4Property.UnsubscribeCallback();
        _backupVariable5Property.UnsubscribeCallback();
        _backupVariable6Property.UnsubscribeCallback();
    }
    
    private void FireIsPlayersReadyToStartGameDidChange(bool value) {
        try {
            isPlayersReadyToStartGameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireIsGameStartedDidChange(bool value) {
        try {
            isGameStartedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireColorWeaponPlayer1DidChange(UnityEngine.Color value) {
        try {
            colorWeaponPlayer1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireColorWeaponPlayer2DidChange(UnityEngine.Color value) {
        try {
            colorWeaponPlayer2DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireGameTimeElapsedDidChange(double value) {
        try {
            gameTimeElapsedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireStreakPlayer1DidChange(int value) {
        try {
            streakPlayer1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireStreakPlayer2DidChange(int value) {
        try {
            streakPlayer2DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTrapsPlayer1DidChange(int value) {
        try {
            trapsPlayer1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTrapsPlayer2DidChange(int value) {
        try {
            trapsPlayer2DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireLevelPlayer1DidChange(int value) {
        try {
            levelPlayer1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireLevelPlayer2DidChange(int value) {
        try {
            levelPlayer2DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireLivesPlayer1DidChange(int value) {
        try {
            livesPlayer1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireLivesPlayer2DidChange(int value) {
        try {
            livesPlayer2DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireGameWinnerDidChange(int value) {
        try {
            gameWinnerDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBackupVariable1DidChange(bool value) {
        try {
            backupVariable1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBackupVariable2DidChange(bool value) {
        try {
            backupVariable2DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBackupVariable3DidChange(int value) {
        try {
            backupVariable3DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBackupVariable4DidChange(int value) {
        try {
            backupVariable4DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBackupVariable5DidChange(float value) {
        try {
            backupVariable5DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBackupVariable6DidChange(float value) {
        try {
            backupVariable6DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _isPlayersReadyToStartGameProperty.WriteLength(context);
        length += _isGameStartedProperty.WriteLength(context);
        length += _colorWeaponPlayer1Property.WriteLength(context);
        length += _colorWeaponPlayer2Property.WriteLength(context);
        length += _gameTimeElapsedProperty.WriteLength(context);
        length += _streakPlayer1Property.WriteLength(context);
        length += _streakPlayer2Property.WriteLength(context);
        length += _trapsPlayer1Property.WriteLength(context);
        length += _trapsPlayer2Property.WriteLength(context);
        length += _levelPlayer1Property.WriteLength(context);
        length += _levelPlayer2Property.WriteLength(context);
        length += _livesPlayer1Property.WriteLength(context);
        length += _livesPlayer2Property.WriteLength(context);
        length += _gameWinnerProperty.WriteLength(context);
        length += _backupVariable1Property.WriteLength(context);
        length += _backupVariable2Property.WriteLength(context);
        length += _backupVariable3Property.WriteLength(context);
        length += _backupVariable4Property.WriteLength(context);
        length += _backupVariable5Property.WriteLength(context);
        length += _backupVariable6Property.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _isPlayersReadyToStartGameProperty.Write(stream, context);
        writes |= _isGameStartedProperty.Write(stream, context);
        writes |= _colorWeaponPlayer1Property.Write(stream, context);
        writes |= _colorWeaponPlayer2Property.Write(stream, context);
        writes |= _gameTimeElapsedProperty.Write(stream, context);
        writes |= _streakPlayer1Property.Write(stream, context);
        writes |= _streakPlayer2Property.Write(stream, context);
        writes |= _trapsPlayer1Property.Write(stream, context);
        writes |= _trapsPlayer2Property.Write(stream, context);
        writes |= _levelPlayer1Property.Write(stream, context);
        writes |= _levelPlayer2Property.Write(stream, context);
        writes |= _livesPlayer1Property.Write(stream, context);
        writes |= _livesPlayer2Property.Write(stream, context);
        writes |= _gameWinnerProperty.Write(stream, context);
        writes |= _backupVariable1Property.Write(stream, context);
        writes |= _backupVariable2Property.Write(stream, context);
        writes |= _backupVariable3Property.Write(stream, context);
        writes |= _backupVariable4Property.Write(stream, context);
        writes |= _backupVariable5Property.Write(stream, context);
        writes |= _backupVariable6Property.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.IsPlayersReadyToStartGame: {
                    changed = _isPlayersReadyToStartGameProperty.Read(stream, context);
                    if (changed) FireIsPlayersReadyToStartGameDidChange(isPlayersReadyToStartGame);
                    break;
                }
                case (uint) PropertyID.IsGameStarted: {
                    changed = _isGameStartedProperty.Read(stream, context);
                    if (changed) FireIsGameStartedDidChange(isGameStarted);
                    break;
                }
                case (uint) PropertyID.ColorWeaponPlayer1: {
                    changed = _colorWeaponPlayer1Property.Read(stream, context);
                    if (changed) FireColorWeaponPlayer1DidChange(colorWeaponPlayer1);
                    break;
                }
                case (uint) PropertyID.ColorWeaponPlayer2: {
                    changed = _colorWeaponPlayer2Property.Read(stream, context);
                    if (changed) FireColorWeaponPlayer2DidChange(colorWeaponPlayer2);
                    break;
                }
                case (uint) PropertyID.GameTimeElapsed: {
                    changed = _gameTimeElapsedProperty.Read(stream, context);
                    if (changed) FireGameTimeElapsedDidChange(gameTimeElapsed);
                    break;
                }
                case (uint) PropertyID.StreakPlayer1: {
                    changed = _streakPlayer1Property.Read(stream, context);
                    if (changed) FireStreakPlayer1DidChange(streakPlayer1);
                    break;
                }
                case (uint) PropertyID.StreakPlayer2: {
                    changed = _streakPlayer2Property.Read(stream, context);
                    if (changed) FireStreakPlayer2DidChange(streakPlayer2);
                    break;
                }
                case (uint) PropertyID.TrapsPlayer1: {
                    changed = _trapsPlayer1Property.Read(stream, context);
                    if (changed) FireTrapsPlayer1DidChange(trapsPlayer1);
                    break;
                }
                case (uint) PropertyID.TrapsPlayer2: {
                    changed = _trapsPlayer2Property.Read(stream, context);
                    if (changed) FireTrapsPlayer2DidChange(trapsPlayer2);
                    break;
                }
                case (uint) PropertyID.LevelPlayer1: {
                    changed = _levelPlayer1Property.Read(stream, context);
                    if (changed) FireLevelPlayer1DidChange(levelPlayer1);
                    break;
                }
                case (uint) PropertyID.LevelPlayer2: {
                    changed = _levelPlayer2Property.Read(stream, context);
                    if (changed) FireLevelPlayer2DidChange(levelPlayer2);
                    break;
                }
                case (uint) PropertyID.LivesPlayer1: {
                    changed = _livesPlayer1Property.Read(stream, context);
                    if (changed) FireLivesPlayer1DidChange(livesPlayer1);
                    break;
                }
                case (uint) PropertyID.LivesPlayer2: {
                    changed = _livesPlayer2Property.Read(stream, context);
                    if (changed) FireLivesPlayer2DidChange(livesPlayer2);
                    break;
                }
                case (uint) PropertyID.GameWinner: {
                    changed = _gameWinnerProperty.Read(stream, context);
                    if (changed) FireGameWinnerDidChange(gameWinner);
                    break;
                }
                case (uint) PropertyID.BackupVariable1: {
                    changed = _backupVariable1Property.Read(stream, context);
                    if (changed) FireBackupVariable1DidChange(backupVariable1);
                    break;
                }
                case (uint) PropertyID.BackupVariable2: {
                    changed = _backupVariable2Property.Read(stream, context);
                    if (changed) FireBackupVariable2DidChange(backupVariable2);
                    break;
                }
                case (uint) PropertyID.BackupVariable3: {
                    changed = _backupVariable3Property.Read(stream, context);
                    if (changed) FireBackupVariable3DidChange(backupVariable3);
                    break;
                }
                case (uint) PropertyID.BackupVariable4: {
                    changed = _backupVariable4Property.Read(stream, context);
                    if (changed) FireBackupVariable4DidChange(backupVariable4);
                    break;
                }
                case (uint) PropertyID.BackupVariable5: {
                    changed = _backupVariable5Property.Read(stream, context);
                    if (changed) FireBackupVariable5DidChange(backupVariable5);
                    break;
                }
                case (uint) PropertyID.BackupVariable6: {
                    changed = _backupVariable6Property.Read(stream, context);
                    if (changed) FireBackupVariable6DidChange(backupVariable6);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _isPlayersReadyToStartGame = isPlayersReadyToStartGame;
        _isGameStarted = isGameStarted;
        _colorWeaponPlayer1 = colorWeaponPlayer1;
        _colorWeaponPlayer2 = colorWeaponPlayer2;
        _gameTimeElapsed = gameTimeElapsed;
        _streakPlayer1 = streakPlayer1;
        _streakPlayer2 = streakPlayer2;
        _trapsPlayer1 = trapsPlayer1;
        _trapsPlayer2 = trapsPlayer2;
        _levelPlayer1 = levelPlayer1;
        _levelPlayer2 = levelPlayer2;
        _livesPlayer1 = livesPlayer1;
        _livesPlayer2 = livesPlayer2;
        _gameWinner = gameWinner;
        _backupVariable1 = backupVariable1;
        _backupVariable2 = backupVariable2;
        _backupVariable3 = backupVariable3;
        _backupVariable4 = backupVariable4;
        _backupVariable5 = backupVariable5;
        _backupVariable6 = backupVariable6;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
