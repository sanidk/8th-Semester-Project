using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PlayerStatSyncModel {

    //Is game started, game winner, time elapsed

    [RealtimeProperty(1, true, true)]
    private bool _isReady;

    [RealtimeProperty(2, true, true)]
    private Color _weaponColor;

    [RealtimeProperty(3, true, true)]
    private float _scoreStreak;

    [RealtimeProperty(4, true, true)]
    private float _trapsSent;

    [RealtimeProperty(5, true, true)]
    private int _currentLevel;

    [RealtimeProperty(6, true, true)]
    private int _lives;

    [RealtimeProperty(7, true, true)]
    private bool _backupVariable1;

    [RealtimeProperty(8, true, true)]
    private bool _backupVariable2;

    [RealtimeProperty(9, true, true)]
    private float _backupVariable3;

    [RealtimeProperty(10, true, true)]
    private float _backupVariable4;

    [RealtimeProperty(11, true, true)]
    private float _backupVariable5;

    [RealtimeProperty(12, true, true)]
    private float _backupVariable6;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerStatSyncModel : RealtimeModel {
    public bool isReady {
        get {
            return _isReadyProperty.value;
        }
        set {
            if (_isReadyProperty.value == value) return;
            _isReadyProperty.value = value;
            InvalidateReliableLength();
            FireIsReadyDidChange(value);
        }
    }
    
    public UnityEngine.Color weaponColor {
        get {
            return _weaponColorProperty.value;
        }
        set {
            if (_weaponColorProperty.value == value) return;
            _weaponColorProperty.value = value;
            InvalidateReliableLength();
            FireWeaponColorDidChange(value);
        }
    }
    
    public float scoreStreak {
        get {
            return _scoreStreakProperty.value;
        }
        set {
            if (_scoreStreakProperty.value == value) return;
            _scoreStreakProperty.value = value;
            InvalidateReliableLength();
            FireScoreStreakDidChange(value);
        }
    }
    
    public float trapsSent {
        get {
            return _trapsSentProperty.value;
        }
        set {
            if (_trapsSentProperty.value == value) return;
            _trapsSentProperty.value = value;
            InvalidateReliableLength();
            FireTrapsSentDidChange(value);
        }
    }
    
    public int currentLevel {
        get {
            return _currentLevelProperty.value;
        }
        set {
            if (_currentLevelProperty.value == value) return;
            _currentLevelProperty.value = value;
            InvalidateReliableLength();
            FireCurrentLevelDidChange(value);
        }
    }
    
    public int lives {
        get {
            return _livesProperty.value;
        }
        set {
            if (_livesProperty.value == value) return;
            _livesProperty.value = value;
            InvalidateReliableLength();
            FireLivesDidChange(value);
        }
    }
    
    public bool backupVariable1 {
        get {
            return _backupVariable1Property.value;
        }
        set {
            if (_backupVariable1Property.value == value) return;
            _backupVariable1Property.value = value;
            InvalidateReliableLength();
            FireBackupVariable1DidChange(value);
        }
    }
    
    public bool backupVariable2 {
        get {
            return _backupVariable2Property.value;
        }
        set {
            if (_backupVariable2Property.value == value) return;
            _backupVariable2Property.value = value;
            InvalidateReliableLength();
            FireBackupVariable2DidChange(value);
        }
    }
    
    public float backupVariable3 {
        get {
            return _backupVariable3Property.value;
        }
        set {
            if (_backupVariable3Property.value == value) return;
            _backupVariable3Property.value = value;
            InvalidateReliableLength();
            FireBackupVariable3DidChange(value);
        }
    }
    
    public float backupVariable4 {
        get {
            return _backupVariable4Property.value;
        }
        set {
            if (_backupVariable4Property.value == value) return;
            _backupVariable4Property.value = value;
            InvalidateReliableLength();
            FireBackupVariable4DidChange(value);
        }
    }
    
    public float backupVariable5 {
        get {
            return _backupVariable5Property.value;
        }
        set {
            if (_backupVariable5Property.value == value) return;
            _backupVariable5Property.value = value;
            InvalidateReliableLength();
            FireBackupVariable5DidChange(value);
        }
    }
    
    public float backupVariable6 {
        get {
            return _backupVariable6Property.value;
        }
        set {
            if (_backupVariable6Property.value == value) return;
            _backupVariable6Property.value = value;
            InvalidateReliableLength();
            FireBackupVariable6DidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(PlayerStatSyncModel model, T value);
    public event PropertyChangedHandler<bool> isReadyDidChange;
    public event PropertyChangedHandler<UnityEngine.Color> weaponColorDidChange;
    public event PropertyChangedHandler<float> scoreStreakDidChange;
    public event PropertyChangedHandler<float> trapsSentDidChange;
    public event PropertyChangedHandler<int> currentLevelDidChange;
    public event PropertyChangedHandler<int> livesDidChange;
    public event PropertyChangedHandler<bool> backupVariable1DidChange;
    public event PropertyChangedHandler<bool> backupVariable2DidChange;
    public event PropertyChangedHandler<float> backupVariable3DidChange;
    public event PropertyChangedHandler<float> backupVariable4DidChange;
    public event PropertyChangedHandler<float> backupVariable5DidChange;
    public event PropertyChangedHandler<float> backupVariable6DidChange;
    
    public enum PropertyID : uint {
        IsReady = 1,
        WeaponColor = 2,
        ScoreStreak = 3,
        TrapsSent = 4,
        CurrentLevel = 5,
        Lives = 6,
        BackupVariable1 = 7,
        BackupVariable2 = 8,
        BackupVariable3 = 9,
        BackupVariable4 = 10,
        BackupVariable5 = 11,
        BackupVariable6 = 12,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _isReadyProperty;
    
    private ReliableProperty<UnityEngine.Color> _weaponColorProperty;
    
    private ReliableProperty<float> _scoreStreakProperty;
    
    private ReliableProperty<float> _trapsSentProperty;
    
    private ReliableProperty<int> _currentLevelProperty;
    
    private ReliableProperty<int> _livesProperty;
    
    private ReliableProperty<bool> _backupVariable1Property;
    
    private ReliableProperty<bool> _backupVariable2Property;
    
    private ReliableProperty<float> _backupVariable3Property;
    
    private ReliableProperty<float> _backupVariable4Property;
    
    private ReliableProperty<float> _backupVariable5Property;
    
    private ReliableProperty<float> _backupVariable6Property;
    
    #endregion
    
    public PlayerStatSyncModel() : base(null) {
        _isReadyProperty = new ReliableProperty<bool>(1, _isReady);
        _weaponColorProperty = new ReliableProperty<UnityEngine.Color>(2, _weaponColor);
        _scoreStreakProperty = new ReliableProperty<float>(3, _scoreStreak);
        _trapsSentProperty = new ReliableProperty<float>(4, _trapsSent);
        _currentLevelProperty = new ReliableProperty<int>(5, _currentLevel);
        _livesProperty = new ReliableProperty<int>(6, _lives);
        _backupVariable1Property = new ReliableProperty<bool>(7, _backupVariable1);
        _backupVariable2Property = new ReliableProperty<bool>(8, _backupVariable2);
        _backupVariable3Property = new ReliableProperty<float>(9, _backupVariable3);
        _backupVariable4Property = new ReliableProperty<float>(10, _backupVariable4);
        _backupVariable5Property = new ReliableProperty<float>(11, _backupVariable5);
        _backupVariable6Property = new ReliableProperty<float>(12, _backupVariable6);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _isReadyProperty.UnsubscribeCallback();
        _weaponColorProperty.UnsubscribeCallback();
        _scoreStreakProperty.UnsubscribeCallback();
        _trapsSentProperty.UnsubscribeCallback();
        _currentLevelProperty.UnsubscribeCallback();
        _livesProperty.UnsubscribeCallback();
        _backupVariable1Property.UnsubscribeCallback();
        _backupVariable2Property.UnsubscribeCallback();
        _backupVariable3Property.UnsubscribeCallback();
        _backupVariable4Property.UnsubscribeCallback();
        _backupVariable5Property.UnsubscribeCallback();
        _backupVariable6Property.UnsubscribeCallback();
    }
    
    private void FireIsReadyDidChange(bool value) {
        try {
            isReadyDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireWeaponColorDidChange(UnityEngine.Color value) {
        try {
            weaponColorDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireScoreStreakDidChange(float value) {
        try {
            scoreStreakDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTrapsSentDidChange(float value) {
        try {
            trapsSentDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireCurrentLevelDidChange(int value) {
        try {
            currentLevelDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireLivesDidChange(int value) {
        try {
            livesDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBackupVariable1DidChange(bool value) {
        try {
            backupVariable1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBackupVariable2DidChange(bool value) {
        try {
            backupVariable2DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBackupVariable3DidChange(float value) {
        try {
            backupVariable3DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBackupVariable4DidChange(float value) {
        try {
            backupVariable4DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBackupVariable5DidChange(float value) {
        try {
            backupVariable5DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBackupVariable6DidChange(float value) {
        try {
            backupVariable6DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _isReadyProperty.WriteLength(context);
        length += _weaponColorProperty.WriteLength(context);
        length += _scoreStreakProperty.WriteLength(context);
        length += _trapsSentProperty.WriteLength(context);
        length += _currentLevelProperty.WriteLength(context);
        length += _livesProperty.WriteLength(context);
        length += _backupVariable1Property.WriteLength(context);
        length += _backupVariable2Property.WriteLength(context);
        length += _backupVariable3Property.WriteLength(context);
        length += _backupVariable4Property.WriteLength(context);
        length += _backupVariable5Property.WriteLength(context);
        length += _backupVariable6Property.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _isReadyProperty.Write(stream, context);
        writes |= _weaponColorProperty.Write(stream, context);
        writes |= _scoreStreakProperty.Write(stream, context);
        writes |= _trapsSentProperty.Write(stream, context);
        writes |= _currentLevelProperty.Write(stream, context);
        writes |= _livesProperty.Write(stream, context);
        writes |= _backupVariable1Property.Write(stream, context);
        writes |= _backupVariable2Property.Write(stream, context);
        writes |= _backupVariable3Property.Write(stream, context);
        writes |= _backupVariable4Property.Write(stream, context);
        writes |= _backupVariable5Property.Write(stream, context);
        writes |= _backupVariable6Property.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.IsReady: {
                    changed = _isReadyProperty.Read(stream, context);
                    if (changed) FireIsReadyDidChange(isReady);
                    break;
                }
                case (uint) PropertyID.WeaponColor: {
                    changed = _weaponColorProperty.Read(stream, context);
                    if (changed) FireWeaponColorDidChange(weaponColor);
                    break;
                }
                case (uint) PropertyID.ScoreStreak: {
                    changed = _scoreStreakProperty.Read(stream, context);
                    if (changed) FireScoreStreakDidChange(scoreStreak);
                    break;
                }
                case (uint) PropertyID.TrapsSent: {
                    changed = _trapsSentProperty.Read(stream, context);
                    if (changed) FireTrapsSentDidChange(trapsSent);
                    break;
                }
                case (uint) PropertyID.CurrentLevel: {
                    changed = _currentLevelProperty.Read(stream, context);
                    if (changed) FireCurrentLevelDidChange(currentLevel);
                    break;
                }
                case (uint) PropertyID.Lives: {
                    changed = _livesProperty.Read(stream, context);
                    if (changed) FireLivesDidChange(lives);
                    break;
                }
                case (uint) PropertyID.BackupVariable1: {
                    changed = _backupVariable1Property.Read(stream, context);
                    if (changed) FireBackupVariable1DidChange(backupVariable1);
                    break;
                }
                case (uint) PropertyID.BackupVariable2: {
                    changed = _backupVariable2Property.Read(stream, context);
                    if (changed) FireBackupVariable2DidChange(backupVariable2);
                    break;
                }
                case (uint) PropertyID.BackupVariable3: {
                    changed = _backupVariable3Property.Read(stream, context);
                    if (changed) FireBackupVariable3DidChange(backupVariable3);
                    break;
                }
                case (uint) PropertyID.BackupVariable4: {
                    changed = _backupVariable4Property.Read(stream, context);
                    if (changed) FireBackupVariable4DidChange(backupVariable4);
                    break;
                }
                case (uint) PropertyID.BackupVariable5: {
                    changed = _backupVariable5Property.Read(stream, context);
                    if (changed) FireBackupVariable5DidChange(backupVariable5);
                    break;
                }
                case (uint) PropertyID.BackupVariable6: {
                    changed = _backupVariable6Property.Read(stream, context);
                    if (changed) FireBackupVariable6DidChange(backupVariable6);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _isReady = isReady;
        _weaponColor = weaponColor;
        _scoreStreak = scoreStreak;
        _trapsSent = trapsSent;
        _currentLevel = currentLevel;
        _lives = lives;
        _backupVariable1 = backupVariable1;
        _backupVariable2 = backupVariable2;
        _backupVariable3 = backupVariable3;
        _backupVariable4 = backupVariable4;
        _backupVariable5 = backupVariable5;
        _backupVariable6 = backupVariable6;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
